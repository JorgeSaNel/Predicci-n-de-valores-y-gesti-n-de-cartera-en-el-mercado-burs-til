# -*- coding: utf-8 -*-
"""2_Context_SP500_Stock_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eu1P0GPNQ7UJkVEUnmKkYoKmyoko4_gQ

# Contexto

En primer lugar, se instalan/importan las librerías necesarias para el modelo
"""

# Descomentar esta línea si se quiere ejecutar en local
!pip install yfinance

import yfinance as yf

import pandas as pd
import matplotlib. pyplot as plt

# Importar el fichero import_data_stock_prediction.py, el cual se conecta a Yahoo Finance e importa los datos
from google.colab import drive
drive.mount('/content/drive')

execfile('/content/drive/MyDrive/StockPrediction/import_data_stock_prediction.py')

"""## Importación S&P 500

Se obtiene el identificador de las top 500 empresas americanas (S&P 500) a través de internet.
"""

# Se obtienen el identificador de las top 500 empresas americanas (S&P 500)
sp_500_tickers = pd.read_html(
    'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[0]
print(sp_500_tickers.head())

"""Se recorren las 500 empresas y se crea un DataFrame con las variables más identificativas."""

def Get_SP500():
    # Fechas de Inicio y Fin para obtener los datos.
    five_years_ago = datetime.now() - relativedelta(years=5)
    start_date = five_years_ago.strftime('%Y-%m-%d')
    end_date = datetime.now().strftime('%Y-%m-%d')

    sp_500_tickers = pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[0]
    sp_500_tickers = sp_500_tickers["Symbol"].values.tolist()
    sp_500_tickers = sorted(sp_500_tickers)

    sp_500 = pd.DataFrame(columns=['Ticker', 'Short Name', 'Sector', 'Industry', 'Recommendation', 'Recommendation Mean', 'Target Low Price', 'Target High Price', 'Target Mean Price', 'Current Price', '%', 'Volume', 'Average Volume', 'EBITDA', 'EBITDA Margins', 'Fecha Actualización', '52 Week Change', 'SMA20', 'SMA50', 'SMA100'])

    for company in sp_500_tickers:
        company = company.replace(".", "-")
        
        newCompany = GetStockInformationByTicker(company, start_date, end_date)
        sp_500 = sp_500.append(newCompany, ignore_index=True)

    return sp_500

sp_500 = Get_SP500()

sp_500.head(5)

"""## Análisis S&P 500

Se crea algunas gráficas que nos ayudan a entender cómo funciona el mercado.
"""

df_sector = sp_500.groupby(['Sector']).size()
df_sector = df_sector.sort_values(ascending=False)
df_sector.plot(kind = 'bar', x='Sector', y='Nº Total')
plt.xlabel('Sector')
plt.ylabel('Nº Total')
plt.title('Agrupación de S&P500 por Sector')

df_sector = sp_500.groupby(['Industry']).size()
df_sector = df_sector.sort_values(ascending=False)
df_sector = df_sector[df_sector > 5]
df_sector.plot(kind = 'bar', x='Industry', y='Nº Total')
plt.xlabel('Industria')
plt.ylabel('Nº Total')
plt.title('Agrupación de S&P500 por Industria')

df_top10_volume = sp_500.sort_values('Volume', ascending=False).head(10)
df_sector = df_top10_volume.groupby(['Sector']).size()
df_sector = df_sector.sort_values(ascending=False)
df_sector.plot(kind = 'bar')
plt.xlabel('Sector')
plt.ylabel('Nº Total/Volumen')
plt.title('10 empresas con más volumen agrupadas por sector')

df_top10_recommendation = sp_500[sp_500['Recommendation Mean'] > 0]
df_top10_recommendation = df_top10_recommendation.sort_values('Recommendation Mean', ascending=True).head(10)
df_top10_recommendation.head(10)

df_worst5_recommendation = sp_500[sp_500['Recommendation Mean'] > 0]
df_worst5_recommendation = df_worst5_recommendation.sort_values('Recommendation Mean', ascending=False).head(5)
df_worst5_recommendation.head(5)